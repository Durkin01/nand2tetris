// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=Aregister); 
    
    // A-Register Control
    Not(in=instruction[15],out=out15);
    Or(a=out15,b=instruction[5],out=aControl);
    ARegister(in=Aregister,load=aControl,out=AregisterOUT,out[0..14]=addressM);
    
    // D-Register Control
    And(a=instruction[15],b=instruction[4],out=dControl);
    DRegister(in=ALUout,load=dControl,out=dALU);    
    
    // MUX2 Control
    And(a=instruction[15],b=instruction[12],out=McontrolOUT);
    Mux16(a=AregisterOUT,b=inM,sel=McontrolOUT,out=aALU);
    
    // WriteM Control
    And(a=instruction[15],b=instruction[3],out=writeM);
     
    // ALU Control
    ALU(x=dALU,y=aALU,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=ALUout,out=outM,zr=zrOUT,ng=ngOUT);

    // PC Control
    // TODO Add multiplexor to select between A and C instructions
       
       DMux8Way(in=true,sel=instruction[0..2],a=ad,b=bd,c=cd,d=dd,e=ed,f=fd,g=gd,h=hd);  
  
       // helper
       Not(in=zrOUT,out=zrNot);
       Not(in=ngOUT,out=ngNot);
       //

    // (000) No Jump
    Or(a=instruction[0],b=instruction[1],out=or0);
    Or(a=or0,b=instruction[2],out=or1);
    Not(in=or1,out=Notor1);
    And(a=Notor1,b=ad,out=njOut);

    // (001) Greater Than
    And(a=zrNot,b=ngNot,out=greaterThan);
    And(a=greaterThan,b=bd,out=gtOut);    

    // (010) Equal Zero
    And(a=zrOUT,b=cd,out=eqOut);

    // (011) >=
    Or(a=zrOUT,b=ngNot,out=greaterOrEqual);
    And(a=greaterOrEqual,b=dd,out=gteOut);

    // (100) Less Than    
    And(a=zrNot,b=ngOUT,out=lessThan);
    And(a=lessThan,b=ed,out=ltOut);

    // (101) Not Equal
    And(a=zrNot,b=fd,out=neOut);

    // (110) <=
    Or(a=zrOUT,b=ngOUT,out=lessOrEqual);
    And(a=lessOrEqual,b=gd,out=lteOut);

    // (111) Unconditional JUMP
    And(a=instruction[0],b=instruction[1],out=and0);
    And(a=and0,b=instruction[2],out=unconditionalJUMP);
    And(a=unconditionalJUMP,b=hd,out=jmpOut);

    // Combining JUMP Logic
    Or(a=false,b=gtOut,out=n0);
    Or(a=n0,b=eqOut,out=n1);
    Or(a=n1,b=gteOut,out=n2);
    Or(a=n2,b=ltOut,out=n3);
    Or(a=n3,b=neOut,out=n4);
    Or(a=n4,b=lteOut,out=n5);
    Or(a=n5,b=jmpOut,out=jumpBit); 

    // Final PC Load Switch
    And(a=instruction[15],b=jumpBit,out=pcControl); 
    Not(in=pcControl,out=incControl);

    PC(in=AregisterOUT,load=pcControl,inc=incControl,reset=reset,out[0..14]=pc);
}
